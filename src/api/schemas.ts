// Generated by ts-to-zod
import { z } from 'zod';
import {
  type IFilm,
  type IPeople,
  type IPlanet,
  type ISpecie,
  type IStarship,
  type IVehicle,
} from './interfaces';

export const iFilmSchema: z.ZodSchema<IFilm> = z.lazy(() =>
  z.object({
    characters: z.union([z.array(z.string()), z.array(iPeopleSchema)]),
    created: z.coerce.date(),
    director: z.string(),
    edited: z.coerce.date(),
    episode_id: z.number(),
    opening_crawl: z.string(),
    planets: z.union([z.array(z.string()), z.array(iPlanetSchema)]),
    producer: z.string(),
    release_date: z.coerce.date(),
    species: z.union([z.array(z.string()), z.array(iSpecieSchema)]),
    starships: z.union([z.array(z.string()), z.array(iStarshipSchema)]),
    title: z.string(),
    url: z.string(),
    vehicles: z.union([z.array(z.string()), z.array(iVehicleSchema)]),
  }),
);

export const iPeopleSchema: z.ZodSchema<IPeople> = z.lazy(() =>
  z.object({
    birth_year: z.string(),
    eye_color: z.string(),
    films: z.union([z.array(z.string()), z.array(iFilmSchema)]),
    gender: z.string(),
    hair_color: z.string(),
    height: z.string(),
    homeworld: z.union([z.string(), iPlanetSchema]),
    mass: z.string(),
    name: z.string(),
    skin_color: z.string(),
    created: z.coerce.date(),
    edited: z.coerce.date(),
    species: z.union([z.array(z.string()), z.array(iSpecieSchema)]),
    starships: z.union([z.array(z.string()), z.array(iStarshipSchema)]),
    url: z.string(),
    vehicles: z.union([z.array(z.string()), z.array(iVehicleSchema)]),
  }),
);

export const iPlanetSchema: z.ZodSchema<IPlanet> = z.lazy(() =>
  z.object({
    climate: z.string(),
    created: z.coerce.date(),
    diameter: z.string(),
    edited: z.coerce.date(),
    films: z.union([z.array(z.string()), z.array(iFilmSchema)]),
    gravity: z.string(),
    name: z.string(),
    orbital_period: z.string(),
    population: z.string(),
    residents: z.union([z.array(z.string()), z.array(iPeopleSchema)]),
    rotation_period: z.string(),
    surface_water: z.string(),
    terrain: z.string(),
    url: z.string(),
  }),
);

export const iSpecieSchema: z.ZodSchema<ISpecie> = z.lazy(() =>
  z.object({
    average_height: z.string(),
    average_lifespan: z.string(),
    classification: z.string(),
    created: z.coerce.date(),
    designation: z.string(),
    edited: z.coerce.date(),
    eye_colors: z.string(),
    hair_colors: z.string(),
    homeworld: z.union([z.string(), iPlanetSchema]),
    language: z.string(),
    name: z.string(),
    people: z.union([z.array(z.string()), z.array(iPeopleSchema)]),
    films: z.union([z.array(z.string()), z.array(iFilmSchema)]),
    skin_colors: z.string(),
    url: z.string(),
  }),
);

export const iStarshipSchema: z.ZodSchema<IStarship> = z.lazy(() =>
  z.object({
    MGLT: z.string(),
    cargo_capacity: z.string(),
    consumables: z.string(),
    cost_in_credits: z.string(),
    created: z.coerce.date(),
    crew: z.string(),
    edited: z.coerce.date(),
    hyperdrive_rating: z.string(),
    length: z.string(),
    manufacturer: z.string(),
    max_atmosphering_speed: z.string(),
    model: z.string(),
    name: z.string(),
    passengers: z.string(),
    films: z.union([z.array(z.string()), z.array(iFilmSchema)]),
    pilots: z.union([z.array(z.string()), z.array(iPeopleSchema)]),
    starship_class: z.string(),
    url: z.string(),
  }),
);

export const iVehicleSchema: z.ZodSchema<IVehicle> = z.lazy(() =>
  z.object({
    cargo_capacity: z.string(),
    consumables: z.string(),
    cost_in_credits: z.string(),
    created: z.coerce.date(),
    crew: z.string(),
    edited: z.coerce.date(),
    length: z.string(),
    manufacturer: z.string(),
    max_atmosphering_speed: z.string(),
    model: z.string(),
    name: z.string(),
    passengers: z.string(),
    pilots: z.union([z.array(z.string()), z.array(iPeopleSchema)]),
    films: z.union([z.array(z.string()), z.array(iFilmSchema)]),
    url: z.string(),
    vehicle_class: z.string(),
  }),
);
